package se.dosf.communitybase.modules.pictureGallery.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.CommunityGroup;
import se.dosf.communitybase.beans.School;
import se.dosf.communitybase.interfaces.Accessible;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateUtils;
import se.unlogic.standardutils.enums.Order;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.time.TimeUtils;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name="picturegallery_galleries")
@XMLElement
public class Gallery implements Elementable, Comparable<Gallery>, Accessible {

	public static final Field PICTURE_RELATION = ReflectionUtils.getField(Gallery.class, "pictures");
	public static final Field GROUP_RELATION = ReflectionUtils.getField(Gallery.class, "groups");
	public static final Field SCHOOL_RELATION = ReflectionUtils.getField(Gallery.class, "schools");

	@Key
	@DAOManaged(columnName="galleryID", autoGenerated=true)
	@XMLElement
	private Integer galleryID;

	@DAOManaged
	@OrderBy(order=Order.ASC,priority=1)
	@WebPopulate(maxLength=65, required=true)
	@XMLElement(cdata=true)
	private String name;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<Picture> pictures;

	@DAOManaged
	@XMLElement
	private Timestamp posted;

	@XMLElement
	private Timestamp lastPicture;

	@DAOManaged
	@XMLElement(cdata=true)
	@WebPopulate(maxLength=65535, required=true)
	private String description;

	@XMLElement(cdata=true)
	private String url;

	@DAOManaged
	@OneToMany(autoGet=true, autoAdd=true, autoUpdate=true)
	@SimplifiedRelation(table="picturegallery_gallerygroups",remoteKeyColumnName="galleryID",remoteValueColumnName="groupID")
	@XMLElement
	private List<CommunityGroup> groups;

	@DAOManaged
	@OneToMany(autoGet=true, autoAdd=true, autoUpdate=true)
	@SimplifiedRelation(table="picturegallery_galleryschools",remoteKeyColumnName="galleryID",remoteValueColumnName="schoolID")
	@XMLElement
	private List<School> schools;

	@DAOManaged
	@XMLElement
	private boolean global;
	
	@DAOManaged
	@WebPopulate(maxLength = 65)
	@XMLElement
	private String category;

	public Integer getGalleryID() {
		return galleryID;
	}

	public void setGalleryID(Integer galleryID) {
		this.galleryID = galleryID;
	}

	public void setPictures(ArrayList<Picture> pictures) {
		this.pictures = pictures;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public List<Picture> getPictures() {
		return this.pictures;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getUrl() {
		return this.url;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public void setPosted(Timestamp posted) {
		this.posted = posted;
	}

	public Timestamp getPosted() {
		return posted;
	}

	@Override
	public String toString() {
		return this.getName() + " (ID: " + this.galleryID + ");";
	}

	@Override
	public int compareTo(Gallery o) {

		return name.compareTo(o.getName());
	}

	@Override
	public Element toXML(Document doc) {
		Element galleryElement = XMLGenerator.toXML(this, doc);
		galleryElement.appendChild(XMLUtils.createElement("postedDate", DateUtils.DATE_FORMATTER.format(this.posted), doc));
		galleryElement.appendChild(XMLUtils.createElement("postedTime", TimeUtils.TIME_FORMATTER.format(this.posted), doc));
		galleryElement.appendChild(XMLUtils.createCDATAElement("postedInMillis", String.valueOf(this.posted.getTime()), doc));
		return galleryElement;
	}

	@Override
	public void setGroups(List<CommunityGroup> groups) {
		this.groups = groups;
	}

	@Override
	public List<CommunityGroup> getGroups() {
		return this.groups;
	}

	@Override
	public void setSchools(List<School> schools) {
		this.schools = schools;
	}

	@Override
	public List<School> getSchools() {
		return this.schools;
	}

	@Override
	public void setGlobal(boolean global) {
		this.global = global;
	}

	@Override
	public boolean isGlobal() {
		return this.global;
	}

	public Timestamp getLastPicture() {

		return lastPicture;
	}

	public void setLastPicture(Timestamp lastPicture) {

		this.lastPicture = lastPicture;
	}

	public String getCategory() {
	
		return category;
	}

	public void setCategory(String category) {
	
		this.category = category;
	}
	
}