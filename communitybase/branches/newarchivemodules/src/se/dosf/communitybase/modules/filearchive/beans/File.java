package se.dosf.communitybase.modules.filearchive.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.CommunityUser;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateUtils;
import se.unlogic.standardutils.enums.Order;
import se.unlogic.standardutils.io.BinarySizeFormater;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.time.TimeUtils;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name="filearchive_files")
@XMLElement
public class File implements Elementable {

	public static final Field SECTION_RELATION = ReflectionUtils.getField(File.class, "section");

	@Key
	@DAOManaged(columnName="fileID", autoGenerated=true)
	@XMLElement
	private Integer fileID;

	@DAOManaged
	@XMLElement(cdata=true)
	@WebPopulate(maxLength=65535, required=false)
	private String description;

	@DAOManaged
	@OrderBy(order=Order.ASC,priority=2)
	@XMLElement
	private Timestamp posted = new Timestamp(System.currentTimeMillis());

	@DAOManaged(dontUpdateIfNull=true)
	@XMLElement(childName="poster")
	private CommunityUser poster;

	@DAOManaged(columnName="sectionID")
	@ManyToOne(remoteKeyField="sectionID",autoAdd=false,autoGet=true,autoUpdate=false)
	@XMLElement
	private Section section;

	@DAOManaged
	@OrderBy(order=Order.ASC,priority=1)
	@XMLElement(cdata=true)
	private String filename;

	@DAOManaged
	@XMLElement
	private Long size;

	public void setFileID(Integer fileID) {
		this.fileID = fileID;
	}

	public Integer getFileID() {
		return fileID;
	}


	public String getFilename() {
		return filename;
	}

	public void setFilename(String filename) {
		this.filename = filename;
	}

	public Timestamp getPosted() {
		return posted;
	}

	public void setPosted(Timestamp posted) {
		this.posted = posted;
	}

	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setSize(Long fileSize) {
		this.size = fileSize;
	}

	public Long getSize() {
		return size;
	}

	public Section getSection() {
		return section;
	}

	public void setSection(Section section) {
		this.section = section;
	}

	@Override
	public String toString() {
		return StringUtils.substring(this.filename, 30, "...") + " (ID: " + this.fileID + ")";
	}

	@Override
	public Element toXML(Document doc) {

		Element fileElement = XMLGenerator.toXML(this, doc);
		fileElement.appendChild(XMLUtils.createElement("postedDate", DateUtils.DATE_FORMATTER.format(this.posted), doc));
		fileElement.appendChild(XMLUtils.createElement("postedTime", TimeUtils.TIME_FORMATTER.format(this.posted), doc));
		fileElement.appendChild(XMLUtils.createCDATAElement("postedInMillis", String.valueOf(this.posted.getTime()), doc));

		XMLUtils.appendNewElement(doc, fileElement, "formatedSize", BinarySizeFormater.getFormatedSize(size));

		return fileElement;
	}

	public CommunityUser getPoster() {

		return poster;
	}

	public void setPoster(CommunityUser poster) {

		this.poster = poster;
	}
}