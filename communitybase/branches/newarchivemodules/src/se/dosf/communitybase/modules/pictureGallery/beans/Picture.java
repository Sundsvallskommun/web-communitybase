package se.dosf.communitybase.modules.pictureGallery.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.CommunityUser;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.ManyToOne;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateUtils;
import se.unlogic.standardutils.enums.Order;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.time.TimeUtils;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name = "picturegallery_pictures")
@XMLElement
public class Picture implements Elementable {

	public static final Field GALLERY_RELATION = ReflectionUtils.getField(Picture.class, "gallery");
	public static final Field COMMENT_RELATION = ReflectionUtils.getField(Picture.class, "comments");

	@Key
	@DAOManaged(columnName = "pictureID", autoGenerated = true)
	@XMLElement
	private Integer pictureID;

	@DAOManaged
	@OrderBy(order = Order.DESC, priority = 2)
	@XMLElement
	private Timestamp posted = new Timestamp(System.currentTimeMillis());

	@DAOManaged
	@XMLElement(childName="poster")
	private CommunityUser poster;

	@DAOManaged(columnName = "galleryID")
	@ManyToOne(remoteKeyField = "galleryID", autoAdd = false, autoGet = true, autoUpdate = false)
	@XMLElement
	private Gallery gallery;

	@DAOManaged
	@OrderBy(order = Order.ASC, priority = 1)
	@XMLElement(cdata = true)
	private String filename;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<Comment> comments;

	public Integer getPictureID() {

		return pictureID;
	}

	public void setPictureID(Integer pictureID) {

		this.pictureID = pictureID;
	}

	public Gallery getGallery() {

		return gallery;
	}

	public void setGallery(Gallery gallery) {

		this.gallery = gallery;
	}

	public String getFilename() {

		return filename;
	}

	public void setFilename(String filename) {

		this.filename = filename;
	}

	public CommunityUser getPoster() {
		return poster;
	}

	public void setPoster(CommunityUser poster) {
		this.poster = poster;
	}

	public Timestamp getPosted() {

		return posted;
	}

	public void setPosted(Timestamp posted) {

		this.posted = posted;
	}

	public List<Comment> getComments() {

		return comments;
	}

	public void setComments(List<Comment> comments) {

		this.comments = comments;
	}

	@Override
	public String toString() {

		return this.filename + " (ID: " + pictureID + ")";
	}

	@Override
	public int hashCode() {

		final int prime = 31;
		int result = 1;
		result = prime * result + ((pictureID == null) ? 0 : pictureID.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {

		if(this == obj){
			return true;
		}
		if(obj == null){
			return false;
		}
		if(getClass() != obj.getClass()){
			return false;
		}
		Picture other = (Picture)obj;
		if(pictureID == null){
			if(other.pictureID != null){
				return false;
			}
		}else if(!pictureID.equals(other.pictureID)){
			return false;
		}
		return true;
	}

	@Override
	public Element toXML(Document doc) {

		Element pictureElement = XMLGenerator.toXML(this, doc);
		pictureElement.appendChild(XMLUtils.createElement("postedDate", DateUtils.DATE_FORMATTER.format(this.posted), doc));
		pictureElement.appendChild(XMLUtils.createElement("postedTime", TimeUtils.TIME_FORMATTER.format(this.posted), doc));
		pictureElement.appendChild(XMLUtils.createCDATAElement("postedInMillis", String.valueOf(this.posted.getTime()), doc));
		return pictureElement;
	}
}
