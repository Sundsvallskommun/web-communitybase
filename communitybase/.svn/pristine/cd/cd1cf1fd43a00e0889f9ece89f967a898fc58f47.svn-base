package se.dosf.communitybase.modules.newsletter.beans;

import java.sql.Blob;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.CommunityGroup;
import se.dosf.communitybase.beans.CommunityUser;
import se.dosf.communitybase.beans.School;
import se.dosf.communitybase.interfaces.Accessible;
import se.dosf.communitybase.utils.CalendarUtil;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.i18n.Language;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;

@Table(name = "newsletters")
@XMLElement
public class NewsLetter implements Elementable, Accessible {

	@Key
	@DAOManaged(columnName = "weekLetterID", autoGenerated = true)
	@XMLElement
	private Integer newsletterID;

	@DAOManaged
	@WebPopulate(maxLength = 255, required = true)
	@XMLElement(cdata = true)
	private String title;

	@DAOManaged
	@XMLElement(cdata = true)
	@WebPopulate(maxLength = 65535, required = true, paramName = "text")
	private String message;

	@DAOManaged(columnName = "posterID", dontUpdateIfNull = true)
	@XMLElement(childName = "poster")
	private CommunityUser poster;

	@DAOManaged
	private Blob image;

	@DAOManaged
	@XMLElement
	private String mimetype;

	@DAOManaged
	@XMLElement
	private String imageLocation;

	@DAOManaged
	@XMLElement
	private Timestamp date;

	@XMLElement
	private String URL;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "groupnewsletters", remoteKeyColumnName = "weekLetterID", remoteValueColumnName = "groupID")
	@XMLElement
	private List<CommunityGroup> groups;

	@DAOManaged
	@OneToMany(autoGet = true, autoAdd = true, autoUpdate = true)
	@SimplifiedRelation(table = "schoolnewsletters", remoteKeyColumnName = "weekLetterID", remoteValueColumnName = "schoolID")
	@XMLElement
	private List<School> schools;

	@DAOManaged
	@XMLElement
	private boolean global;

	@DAOManaged
	@XMLElement
	@WebPopulate
	private boolean draft;

	@DAOManaged
	@OneToMany
	@XMLElement
	private List<NewsLetterReceipt> receipts;

	@XMLElement
	private String fullDate;

	public Integer getNewsletterID() {

		return newsletterID;
	}

	public void setNewsletterID(Integer newsletterID) {

		this.newsletterID = newsletterID;
	}

	public String getTitle() {

		return title;
	}

	public void setTitle(String title) {

		this.title = title;
	}

	public String getMessage() {

		return message;
	}

	public void setMessage(String message) {

		this.message = message;
	}

	public void setPoster(CommunityUser poster) {

		this.poster = poster;
	}

	public CommunityUser getPoster() {

		return poster;
	}

	public String getMimetype() {

		return mimetype;
	}

	public void setMimetype(String mimetype) {

		this.mimetype = mimetype;
	}

	public void setDate(Timestamp date) {

		this.date = date;
	}

	public void setDescription(String title) {

		this.title = title;
	}

	public void setURL(String url) {

		URL = url;
	}

	public Timestamp getDate() {

		return this.date;
	}

	public String getDescription() {

		return this.title;
	}

	public String getUrl() {

		return this.URL;
	}

	public void setImage(Blob image) {

		this.image = image;
	}

	public Blob getImage() {

		return image;
	}

	public void setImageLocation(String imageLocation) {

		this.imageLocation = imageLocation;
	}

	public String getImageLocation() {

		return imageLocation;
	}

	@Override
	public void setGroups(List<CommunityGroup> groups) {

		this.groups = groups;
	}

	@Override
	public List<CommunityGroup> getGroups() {

		return groups;
	}

	@Override
	public void setGlobal(boolean global) {

		this.global = global;
	}

	@Override
	public boolean isGlobal() {

		return this.global;
	}

	@Override
	public void setSchools(List<School> schools) {

		this.schools = schools;
	}

	@Override
	public List<School> getSchools() {

		return schools;
	}

	public void setReceipts(List<NewsLetterReceipt> receipts) {

		this.receipts = receipts;
	}

	public List<NewsLetterReceipt> getReceipts() {

		return receipts;
	}

	public void setFullDate(Language language) {

		if(date != null) {

			Calendar calendar = Calendar.getInstance();
			calendar.setTimeInMillis(date.getTime());

			this.fullDate = CalendarUtil.getFullDateTimeString(calendar, language);

		}
	}

	public String getFullDate() {

		return fullDate;
	}

	@Override
	public String toString() {

		return this.title + " (ID: " + this.newsletterID + ")";
	}

	@Override
	public Element toXML(Document doc) {

		return XMLGenerator.toXML(this, doc);
	}

	public boolean isDraft() {

		return draft;
	}

	public void setDraft(boolean draft) {

		this.draft = draft;
	}

}
