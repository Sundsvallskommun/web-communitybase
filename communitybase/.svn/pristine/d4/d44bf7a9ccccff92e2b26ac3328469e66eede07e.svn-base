package se.dosf.communitybase.modules.notifications;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;

import se.dosf.communitybase.interfaces.Notification;
import se.unlogic.hierarchy.core.handlers.SourceAttributeHandler;
import se.unlogic.hierarchy.core.interfaces.attributes.AttributeHandler;
import se.unlogic.hierarchy.core.interfaces.attributes.AttributeSource;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.enums.Order;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.xml.XMLElement;

@Table(name="communitybase_notifications")
@XMLElement
public class StoredNotification implements AttributeSource, Notification{

	public static final Field ATTRIBUTES_RELATION = ReflectionUtils.getField(StoredNotification.class, "attributes");

	private SourceAttributeHandler attributeHandler;

	@DAOManaged(autoGenerated=true)
	@Key
	@XMLElement
	private Integer notificationID;

	//This field can be null if the notification comes from a module using it's true moduleID in the root section
	@DAOManaged
	@XMLElement
	private Integer sectionID;

	@DAOManaged
	@XMLElement
	private Integer sourceModuleID;

	@DAOManaged
	@XMLElement
	private Integer userID;

	@DAOManaged
	@OrderBy(order=Order.DESC)
	@XMLElement
	private Timestamp added;

	@DAOManaged
	@XMLElement
	private boolean enabled;

	@DAOManaged(columnName="isRead")
	@XMLElement
	private boolean read;

	@DAOManaged
	@XMLElement
	private boolean shown;
	
	//This field can be null
	@DAOManaged
	@XMLElement
	private String notificationType;

	//This field can be null
	@DAOManaged
	@XMLElement
	private Integer externalNotificationID;

	//This field can be null
	@DAOManaged
	@OneToMany(autoAdd=true, autoGet=true)
	@XMLElement
	private List<StoredNotificationAttribute> attributes;

	@Override
	public String toString() {

		return "notificationID: " + notificationID + ", sectionID: " + sectionID + ", sourceModuleID: " + sourceModuleID + ", notificationType: " + notificationType + ", externalNotificationID: " + externalNotificationID;
	}


	@Override
	public Integer getNotificationID() {

		return notificationID;
	}


	public void setNotificationID(Integer notificationID) {

		this.notificationID = notificationID;
	}


	@Override
	public Integer getSectionID() {

		return sectionID;
	}


	public void setSectionID(Integer sectionID) {

		this.sectionID = sectionID;
	}


	@Override
	public Integer getSourceModuleID() {

		return sourceModuleID;
	}


	public void setSourceModuleID(Integer sourceModuleID) {

		this.sourceModuleID = sourceModuleID;
	}


	@Override
	public Integer getUserID() {

		return userID;
	}


	public void setUserID(Integer userID) {

		this.userID = userID;
	}


	@Override
	public Timestamp getAdded() {

		return added;
	}


	public void setAdded(Timestamp added) {

		this.added = added;
	}


	@Override
	public boolean isEnabled() {

		return enabled;
	}


	public void setEnabled(boolean enabled) {

		this.enabled = enabled;
	}


	@Override
	public boolean isRead() {

		return read;
	}


	public void setRead(boolean read) {

		this.read = read;
	}


	
	@Override
	public boolean isShown() {
	
		return shown;
	}


	
	public void setShown(boolean shown) {
	
		this.shown = shown;
	}


	@Override
	public String getNotificationType() {

		return notificationType;
	}


	public void setNotificationType(String notificationType) {

		this.notificationType = notificationType;
	}


	@Override
	public Integer getExternalNotificationID() {

		return externalNotificationID;
	}


	public void setExternalNotificationID(Integer externalNotificationID) {

		this.externalNotificationID = externalNotificationID;
	}


	@Override
	public List<StoredNotificationAttribute> getAttributes() {

		return attributes;
	}


	public void setAttributes(List<StoredNotificationAttribute> attributes) {

		this.attributes = attributes;
	}


	@Override
	public synchronized AttributeHandler getAttributeHandler() {

		if(attributeHandler == null){

			this.attributeHandler = new SourceAttributeHandler(this, 255, 1024);
		}

		return attributeHandler;
	}

	@Override
	public void addAttribute(String name, String value) {

		if(this.attributes == null){

			attributes = new ArrayList<StoredNotificationAttribute>();
		}

		attributes.add(new StoredNotificationAttribute(name, value));
	}
}
