package se.dosf.communitybase.modules.linkarchive.beans;

import java.lang.reflect.Field;
import java.sql.Timestamp;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import se.dosf.communitybase.beans.CommunityGroup;
import se.dosf.communitybase.beans.CommunityUser;
import se.dosf.communitybase.beans.School;
import se.dosf.communitybase.interfaces.Accessible;
import se.dosf.communitybase.modules.filearchive.beans.Section;
import se.unlogic.standardutils.annotations.WebPopulate;
import se.unlogic.standardutils.dao.annotations.DAOManaged;
import se.unlogic.standardutils.dao.annotations.Key;
import se.unlogic.standardutils.dao.annotations.OneToMany;
import se.unlogic.standardutils.dao.annotations.OrderBy;
import se.unlogic.standardutils.dao.annotations.SimplifiedRelation;
import se.unlogic.standardutils.dao.annotations.Table;
import se.unlogic.standardutils.date.DateUtils;
import se.unlogic.standardutils.enums.Order;
import se.unlogic.standardutils.populators.StringURLPopulator;
import se.unlogic.standardutils.reflection.ReflectionUtils;
import se.unlogic.standardutils.string.StringUtils;
import se.unlogic.standardutils.time.TimeUtils;
import se.unlogic.standardutils.xml.Elementable;
import se.unlogic.standardutils.xml.XMLElement;
import se.unlogic.standardutils.xml.XMLGenerator;
import se.unlogic.standardutils.xml.XMLUtils;

@Table(name="linkarchive_links")
@XMLElement
public class Link implements Elementable, Comparable<Link>, Accessible {
	
	public static final Field GROUP_RELATION = ReflectionUtils.getField(Section.class, "groups");
	public static final Field SCHOOL_RELATION = ReflectionUtils.getField(Section.class, "schools");

	@Key
	@DAOManaged(columnName="linkID", autoGenerated=true)
	@XMLElement
	private Integer linkID;
	
	@DAOManaged
	@OrderBy(order=Order.DESC,priority=1)
	@XMLElement
	private Timestamp posted = new Timestamp(System.currentTimeMillis());
	
	@DAOManaged(dontUpdateIfNull=true)
	@XMLElement(childName="poster")
	private CommunityUser poster;

	@DAOManaged
	@XMLElement(cdata=true)
	@WebPopulate(maxLength=65535, required=true)
	private String description;
	
	@DAOManaged
	@XMLElement
	@WebPopulate(required=true,maxLength=1000,populator=StringURLPopulator.class)
	private String url;

	@DAOManaged
	@OneToMany(autoGet=true, autoAdd=true, autoUpdate=true)
	@SimplifiedRelation(table="linkarchive_linkgroups",remoteKeyColumnName="linkID",remoteValueColumnName="groupID")
	@XMLElement
	private List<CommunityGroup> groups;
	
	@DAOManaged
	@OneToMany(autoGet=true, autoAdd=true, autoUpdate=true)
	@SimplifiedRelation(table="linkarchive_linkschools",remoteKeyColumnName="linkID",remoteValueColumnName="schoolID")
	@XMLElement
	private List<School> schools;
	
	@DAOManaged
	@XMLElement
	private boolean global;	

	public Integer getLinkID() {
		return linkID;
	}

	public void setLinkID(Integer linkID) {
		this.linkID = linkID;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public void setUrl(String url) {
		this.url = url;
	}

	public String getDescription() {
		return this.description;
	}

	public String getUrl() {
		return this.url;
	}

	public CommunityUser getPoster() {
		return poster;
	}

	public void setPoster(CommunityUser poster) {
		this.poster = poster;
	}

	public Timestamp getPosted() {
		return posted;
	}

	public void setPosted(Timestamp posted) {
		this.posted = posted;
	}

	@Override
	public String toString() {
		return StringUtils.substring(this.url.replace("\n", ""), 30, "...") + " (ID: " + this.linkID + ")";
	}


//	public Element toXML(Document doc) {
//
//		Element linkElement = doc.createElement("link");
//		Element postedBy = doc.createElement("postedBy");
//
//		if (this.getDate() != null) {
//			linkElement.appendChild(XMLUtils.createElement("posted", DateUtils.DATE_TIME_FORMATTER.format(date), doc));
//
//
//			linkElement.appendChild(XMLUtils.createCDATAElement("postedInMillis", String.valueOf(this.date.getTime()), doc));
//		}
//
//		if (this.getDescription() != null) {
//			linkElement.appendChild(XMLUtils.createCDATAElement("description", this.getDescription(), doc));
//		}
//
//		if (this.getUrl() != null) {
//			linkElement.appendChild(XMLUtils.createCDATAElement("url", this.getUrl(), doc));
//		}
//
//		if (this.getLinkID() != null) {
//			linkElement.appendChild(XMLUtils.createElement("linkID", this.getLinkID().toString(), doc));
//		}
//
//		if (this.linkType != null) {
//			linkElement.appendChild(XMLUtils.createElement("linkType", linkType.toString(), doc));
//		}
//
//		if(this.getPostedBy() != null){
//			postedBy.appendChild(this.getPostedBy().toXML(doc));
//			linkElement.appendChild(postedBy);
//		}
//
//		return linkElement;
//	}

	@Override
	public int compareTo(Link o) {
		return this.getDescription().compareTo(o.getDescription());
	}

	@Override
	public void setGroups(List<CommunityGroup> groups) {
		this.groups = groups;
	}

	@Override
	public List<CommunityGroup> getGroups() {
		return this.groups;
	}

	@Override
	public void setSchools(List<School> schools) {
		this.schools = schools;	
	}

	@Override
	public List<School> getSchools() {
		return this.schools;
	}

	@Override
	public void setGlobal(boolean global) {
		this.global = global;
	}

	@Override
	public boolean isGlobal() {
		return this.global;
	}

	@Override
	public Element toXML(Document doc) {
		Element linkElement = XMLGenerator.toXML(this, doc);
		linkElement.appendChild(XMLUtils.createElement("postedDate", DateUtils.DATE_FORMATTER.format(this.posted), doc));
		linkElement.appendChild(XMLUtils.createElement("postedTime", TimeUtils.TIME_FORMATTER.format(this.posted), doc));
		linkElement.appendChild(XMLUtils.createCDATAElement("postedInMillis", String.valueOf(this.posted.getTime()), doc));
		return linkElement;
	}
}
